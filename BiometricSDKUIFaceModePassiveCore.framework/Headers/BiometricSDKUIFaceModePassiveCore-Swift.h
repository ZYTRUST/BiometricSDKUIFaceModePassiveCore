// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef BIOMETRICSDKUIFACEMODEPASSIVECORE_SWIFT_H
#define BIOMETRICSDKUIFACEMODEPASSIVECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import BiometricSDK;
@import CoreGraphics;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BiometricSDKUIFaceModePassiveCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIColor;
@class NSCoder;

/// View used for bluring the camera preview.
SWIFT_CLASS("_TtC33BiometricSDKUIFaceModePassiveCore15BlurOverlayView")
@interface BlurOverlayView : UIView
/// Blur effect strongness which should be a value in range [0, 1]
@property (nonatomic) IBInspectable float blurEffectStrongness;
/// Blur effect color.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull blurColor;
/// Initializes and returns a newly allocated view object.
/// \param frame Frame rectangle.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object.
/// \param aDecoder Decoder.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View used for displaying countdown timer at the begining of the challenge and additional hints during the challange.
SWIFT_CLASS("_TtC33BiometricSDKUIFaceModePassiveCore15CaptureInfoView")
@interface CaptureInfoView : UIView
/// Color of counter text.
@property (nonatomic, strong) UIColor * _Nonnull counterColor;
/// Initializes and returns a newly allocated view object.
/// \param frame Frame rectangle.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object.
/// \param aDecoder Decoder.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

/// View used for displaying challenge result.
SWIFT_CLASS("_TtC33BiometricSDKUIFaceModePassiveCore19ChallengeResultView")
@interface ChallengeResultView : UIView
/// Color of success image background.
@property (nonatomic, strong) UIColor * _Nonnull validColor;
/// Color of failure image background.
@property (nonatomic, strong) UIColor * _Nonnull invalidColor;
/// Image used for displaying success.
@property (nonatomic, strong) UIImage * _Nullable validImage;
/// Image for displaying failure.
@property (nonatomic, strong) UIImage * _Nullable invalidImage;
/// Initializes and returns a newly allocated view object.
/// \param frame Frame rectangle.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object.
/// \param aDecoder Decoder.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Shows given result on the view.
/// \param success Specifies if should show success or failure.
///
- (void)showResultWithSuccess:(BOOL)success;
/// Intrinsic content size.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UIImageView;
@class BIOFaceImage;
@class BIOBiometrics;

/// View used for showing default passive liveness challenge.
SWIFT_CLASS("_TtC33BiometricSDKUIFaceModePassiveCore26PassiveLivenessCaptureView")
@interface PassiveLivenessCaptureView : UIView
/// Minimum device pitch needed to perform the challenge.
@property (nonatomic) double minimumDevicePitch;
/// View used for displaying preview from the camera.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull previewView;
/// Initializes and returns a newly allocated view object.
/// \param frame Frame rectangle.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object.
/// \param aDecoder Decoder.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Prepares the view to perform the challange. You should call this method before you start using this view.
- (void)start;
/// Cleans up the view after the challange. You should call this method after you finish using this view.
- (void)stop;
/// Method that you should call before starting the capture. It is used to handle initial capture delay automatically,
/// completionHandler is executed after capture is unlocked and ready to start.
/// \param delay Number of seconds for initial countdown.
///
/// \param timeToUnlockHandler Time to unlock handler.
///
/// \param completionHandler Completion handler.
///
- (void)handleCapturePreparedWithDelay:(NSInteger)delay timeToUnlockHandler:(NSInteger (^ _Nullable)(void))timeToUnlockHandler completionHandler:(void (^ _Nullable)(void))completionHandler;
/// Method that you should call to handle capturing info from SDK.
/// \param info Capturing info.
///
/// \param error Capture error.
///
- (void)handleCaptureInfoWithInfo:(BIOCapturingInfo)info error:(NSError * _Nullable)error;
/// Method that you should call to handle capture is locked information from SDK.
/// \param seconds Number of seconds for which capture was locked.
///
- (void)handleCaptureIsLockedWithSeconds:(NSInteger)seconds;
/// Method that you should call to handle capture finished information from SDK.
/// \param images Captured images.
///
/// \param biometrics Captured biometrics.
///
/// \param error Capture error.
///
/// \param animationDuration Finish animation duration.
///
/// \param completionHandler Completion handler called after finishing the animation.
///
- (void)handleCaptureFinishedWithImages:(NSArray<BIOFaceImage *> * _Nullable)images biometrics:(BIOBiometrics * _Nullable)biometrics error:(NSError * _Nullable)error animationDuration:(NSTimeInterval)animationDuration completionHandler:(void (^ _Nullable)(void))completionHandler;
@end


/// View used for displaying passive liveness hints above the camera preview.
SWIFT_CLASS("_TtC33BiometricSDKUIFaceModePassiveCore24PassiveLivenessHintsView")
@interface PassiveLivenessHintsView : UIView
/// Color of hints.
@property (nonatomic, strong) UIColor * _Nonnull hintsColor;
/// Color of hints details.
@property (nonatomic, strong) UIColor * _Nonnull hintsDetailsColor;
/// Color of hints background.
@property (nonatomic, strong) UIColor * _Nonnull hintsBackgroundColor;
/// Color of displayed images.
@property (nonatomic, strong) UIColor * _Nonnull imageTintColor;
/// Optional custom image for face outline.
@property (nonatomic, strong) UIImage * _Nullable faceImage;
/// Initializes and returns a newly allocated view object.
/// \param frame Frame rectangle.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated view object.
/// \param aDecoder Decoder.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
